{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Theory Of Automata\n","## Assignment # 03"],"metadata":{"id":"ronx5ef7qm97"}},{"cell_type":"markdown","source":["#Team Members:\n","\n","Muhammad Tahir (K21-4503) \n","Insha Javed (K21-3279)\n","Sabika Shameel (K21-4606)"],"metadata":{"id":"S9asx8XmrCXI"}},{"cell_type":"code","source":["#TOA Assignment using Python \n","#Implementation of a Parser for given CFG\n","#       E → E + T | T\n","#       T → T * F | F\n","#       F → (E) | a\n","\n","from math import *\n","\n","class P_gen:                  #Class for Parser Generator  \n","    def __init__(x, input):\n","        x.input = input\n","        x.index = 0\n","       \n","    def T_func(x):\n","\n","      #  T → T * F | F\n","      #  T_func is managing the expressions with * sign\n","\n","        if x.F_func():\n","            while x.index < len(x.input) and x.input[x.index] == '*':\n","                x.index += 1\n","                if not x.F_func():\n","                    return False\n","            return True\n","        return False\n","\n","    def F_func(x):\n","\n","      # F → (E) | a\n","      # E_func is managing the expressions with + sign\n","\n","        if x.index < len(x.input):\n","            if x.input[x.index] == '(':\n","                x.index += 1\n","                if not x.E_func():\n","                    return False\n","                    #Increment the index if '(' found \n","                if x.index < len(x.input) and x.input[x.index] == ')':\n","                    x.index += 1\n","                    return True\n","                else:\n","                    return False\n","            elif x.input[x.index] == 'a':\n","                x.index += 1\n","                return True\n","        return False\n","\n","    def E_func(x):  \n","\n","      # E → E + T | T   \n","      # E_func is managing the expressions with + sign\n","\n","        if x.T_func():\n","            while x.index < len(x.input) and x.input[x.index] == '+':\n","                x.index += 1\n","                if not x.T_func():\n","                    return False\n","            return True\n","        return False\n","\n","    def checker(x):\n","      # Given String is accepted if the index and length of the given is equal \n","        if x.E_func():\n","            if x.index == len(x.input):\n","                return True\n","        return False"],"metadata":{"id":"HJiMhU_0rPKo","executionInfo":{"status":"ok","timestamp":1684918303381,"user_tz":-300,"elapsed":11,"user":{"displayName":"Muhammad Shahzad","userId":"06212605060663650761"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["def test(xx):\n","  P_gen = P_gen(xx)\n","  if P_gen.checker():\n","      print('\\nThe Input Entered by The User is Valid!')\n","  else:\n","      print('\\nThe Input Entered by The User is Invalid!')"],"metadata":{"id":"sDezFkeXJNpR","executionInfo":{"status":"ok","timestamp":1684918310803,"user_tz":-300,"elapsed":8,"user":{"displayName":"Muhammad Shahzad","userId":"06212605060663650761"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["#taking input from the user\n","a = input(\"\\nInput String: \")\n","\n","#calling and passing the argument to the function\n","test(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"lUVftDQtPa63","executionInfo":{"status":"error","timestamp":1684918328881,"user_tz":-300,"elapsed":8370,"user":{"displayName":"Muhammad Shahzad","userId":"06212605060663650761"}},"outputId":"2e2e02e2-6fde-4479-95dc-fad34c68d974"},"execution_count":3,"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Input String: a+a\n"]},{"output_type":"error","ename":"UnboundLocalError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-b9e3fde39188>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#calling and passing the argument to the function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-2-2925cebfb8b0>\u001b[0m in \u001b[0;36mtest\u001b[0;34m(xx)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mP_gen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mP_gen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mP_gen\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchecker\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nThe Input Entered by The User is Valid!'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'P_gen' referenced before assignment"]}]}]}